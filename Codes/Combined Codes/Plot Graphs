import pandas as pd
import matplotlib.pyplot as plt
import os
from openpyxl import load_workbook
from openpyxl.drawing.image import Image
from io import BytesIO
import time
import random

# Set input folder path
input_folder = 'Extracted Data/VRU Headform (C) - Color-wise data'

# Start timing the execution
start_time = time.time()

# Function to add labels with minimal overlap
def add_labels(ax, x_data, y_data):
    for i in range(len(x_data)):
        ax.annotate(
            f'{y_data[i]:.2f}', 
            (x_data[i], y_data[i]),
            textcoords="offset points", 
            xytext=(random.randint(-10, 10), random.randint(-10, 10)), 
            ha='center', fontsize=6
        )

# Loop through each Excel file in the input folder
for file_name in os.listdir(input_folder):
    if file_name.endswith('.xlsx'):
        file_path = os.path.join(input_folder, file_name)
        
        # Read Excel file
        df = pd.read_excel(file_path)
        
        # Load the existing Workbook
        wb = load_workbook(file_path)
        
        # Remove the sheet named 'Graphs' if it already exists
        if 'Graphs' in wb.sheetnames:
            del wb['Graphs']
        
        # Create a sheet named 'Graphs'
        ws = wb.create_sheet(title='Graphs')
        
        # Initial positions for the first graph
        row_position = 1
        col_position = 1
        
        # Constants to control the layout
        max_cols = 2  # Number of columns
        row_increment = 26  # Number of rows between graphs
        col_increment = 10  # Number of columns between graphs
        
        # Generate scatter plots
        for i, col in enumerate(df.columns[1:]):
            fig, ax = plt.subplots()
            scatter = ax.scatter(df[df.columns[0]], df[col], label=col, s=8, c='red')  # Set marker size to 8 and color to red
            
            # Calculate the average value for the y-axis
            avg_value = df[col].mean()
            
            # Plot the average value as a horizontal orange line
            ax.axhline(y=avg_value, color='orange', linestyle='-', label=f'Average: {avg_value:.2f}')
            
            ax.set_xlabel(df.columns[0], fontsize=10)  # Reduce x-axis label font size
            ax.set_ylabel('%-age', fontsize=10)  # Set y-axis label to '%-age'
            ax.set_title(f'{col}', fontsize=12)  # Reduce title font size
            ax.xaxis.set_tick_params(rotation=90, labelsize=6)  # Reduce x-axis label font size
            ax.yaxis.set_tick_params(labelsize=8)  # Reduce y-axis label font size
            ax.legend(fontsize=8)  # Adjust legend font size
            
            # Add data labels with 2 decimal places and offset to avoid overlapping
            add_labels(ax, df[df.columns[0]], df[col])
            
            # Adjust layout to make sure labels are fully visible
            plt.tight_layout()
            
            # Save plot to a BytesIO object
            img_stream = BytesIO()
            plt.savefig(img_stream, format='png', bbox_inches='tight')  # Use bbox_inches='tight' to crop extra whitespace
            plt.close(fig)
            
            # Add image to Excel in the 'Graphs' sheet
            img_stream.seek(0)
            img = Image(img_stream)
            
            # Calculate anchor position for the image
            img.anchor = ws.cell(row=row_position, column=col_position).coordinate
            ws.add_image(img)
            
            # Update row and column positions for the next graph
            if (i + 1) % max_cols == 0:
                row_position += row_increment  # Move to the next row block after filling max_cols
                col_position = 1  # Reset to the first column
            else:
                col_position += col_increment  # Move to the next column

        # Save the updated Excel file with graphs
        wb.save(file_path)

# End timing the execution
end_time = time.time()
execution_time = end_time - start_time

print(f"Graphs have been added to the same sheet named 'Graphs' in the input Excel files.")
print(f"Execution time: {execution_time:.2f} seconds")
