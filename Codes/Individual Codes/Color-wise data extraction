import os
import time
from openpyxl import load_workbook, Workbook

# Suppress the warning messages
import warnings
warnings.filterwarnings("ignore", category=UserWarning, module="openpyxl")

input_folder = 'Extracted Data/VRU Headform - Prediction tables'
output_folder = 'Extracted Data/VRU Headform - Color-wise data'

# Ensure output folder exists
os.makedirs(output_folder, exist_ok=True)

# Start timing
start_time = time.time()

# Iterate through each Excel file in the input folder
for filename in os.listdir(input_folder):
    if filename.endswith('.xlsx'):
        # Load the input workbook
        input_path = os.path.join(input_folder, filename)
        input_wb = load_workbook(input_path)
        input_sheet = input_wb.active

        # Create a new workbook for output
        output_wb = Workbook()
        output_sheet = output_wb.active
        output_sheet.title = "Data"
        output_filename = os.path.join(output_folder, filename)
        
        # Get the sheet names to be created from the first sheet's second column
        sheet_names = [cell.value for cell in input_sheet['B'] if cell.value is not None]

        # Create a dictionary to store values by car name
        car_values = {sheet_name: [] for sheet_name in sheet_names}
        sheet_headers = []  # To keep track of sheet names for columns

        for input_sheet_name in input_wb.sheetnames:
            input_sheet = input_wb[input_sheet_name]
            sheet_headers.append(input_sheet_name)
            
            # Search for the sheet names in the input sheet
            for row in input_sheet.iter_rows(min_row=1, max_row=input_sheet.max_row, min_col=1, max_col=input_sheet.max_column):
                for cell in row:
                    if cell.value in sheet_names:
                        value = (row[4].value if len(row) > 4 else None) * 100
                        car_values[cell.value].append(value)
                        break

        # Write headers in the output sheet
        output_sheet.append(['Car Names'] + sheet_names)

        # Determine the maximum number of rows for each car name
        max_rows = max(len(values) for values in car_values.values())

        # Write data in transposed format
        for i in range(max_rows):
            row_data = [sheet_headers[i] if i < len(sheet_headers) else None]  # Sheet names in the first column
            for car_name in sheet_names:
                row_data.append(car_values[car_name][i] if i < len(car_values[car_name]) else None)
            output_sheet.append(row_data)

        # Adjust column widths
        for col in output_sheet.columns:
            max_length = 0
            column = col[0].column_letter  # Get the column name
            for cell in col:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = (max_length + 2)
            output_sheet.column_dimensions[column].width = adjusted_width

        # Save the output workbook
        output_wb.save(output_filename)
        print(f'Processed and saved: {output_filename}')

# End timing
end_time = time.time()
elapsed_time = end_time - start_time

print(f'Time taken to execute the code: {elapsed_time:.2f} seconds')
