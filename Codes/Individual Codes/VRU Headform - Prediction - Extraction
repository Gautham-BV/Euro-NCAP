import os
import pandas as pd
import openpyxl
import time
import re

def extract_data_from_excel(file_path):
    header = None
    data = []
    try:
        # Load the workbook and sheets
        workbook = openpyxl.load_workbook(file_path, data_only=True)
        
        # Extract the desired name based on conditions
        file_name = os.path.basename(file_path)
        name_part = None
        
        # Try to extract the name till the year (4 continuous digits)
        match = re.search(r'\D*(\d{4})', file_name)
        if match:
            name_part = file_name[:match.start()].strip()
        else:
            # Try to extract the part before 'SUMMARY'
            summary_index = file_name.find('SUMMARY')
            if summary_index != -1:
                name_part = file_name[:summary_index].strip()
            else:
                # Use the full file name if neither condition is met
                name_part = file_name

        # Clean up the name part
        name_part = name_part.replace('_', ' ').replace('-', ' ').strip()
        
        # Extract the data from the "VRU Headform" sheet between "PREDICTION" and "%-age"
        if "VRU Headform" in workbook.sheetnames:
            vru_headform_sheet = workbook["VRU Headform"]
            prediction_cell = None
            percentage_cell = None
            for row in vru_headform_sheet.iter_rows():
                for cell in row:
                    if cell.value == "PREDICTION":
                        prediction_cell = cell
                    elif cell.value == "%-age":
                        percentage_cell = cell
                    if prediction_cell and percentage_cell:
                        break

            if prediction_cell and percentage_cell:
                start_row = prediction_cell.row
                start_col = prediction_cell.column
                end_col = percentage_cell.column

                # Extract the data from the rows between "PREDICTION" and "%-age"
                data = [
                    [vru_headform_sheet.cell(row=i, column=j).value
                     for j in range(start_col, end_col + 1)]
                    for i in range(start_row, start_row + 10)
                ]
    except Exception as e:
        print(f"Error processing {file_path}: {e}")
        return None, None

    return name_part, data

def print_table(df):
    # Format and print the DataFrame
    print(df.to_string(index=False))

# Define the root directory containing all the subdirectories and files
root_directory = "Euro NCAP"

# Define the output directory for the combined files
output_directory = "Extracted Data/VRU Headform - Prediction tables"

# Ensure the output directory exists
if not os.path.exists(output_directory):
    os.makedirs(output_directory)

# Record the start time
start_time = time.time()

# Iterate through each folder in the root directory
for folder_name in os.listdir(root_directory):
    folder_path = os.path.join(root_directory, folder_name)
    
    # Ensure it's a directory
    if os.path.isdir(folder_path):
        # Use only the first word of the folder name
        first_word_of_folder = folder_name.split()[0]
        
        # Define the path for the combined Excel file in the "Results" folder
        output_file = os.path.join(output_directory, f"{first_word_of_folder}_cars_combined.xlsx")
        
        # Initialize a new Excel writer for the folder
        with pd.ExcelWriter(output_file, engine='openpyxl') as writer:
            # Walk through the directory tree within the folder
            for subdir, dirs, files in os.walk(folder_path):
                for file in files:
                    # Check if the file is an Excel file
                    if file.endswith('.xlsx') or file.endswith('.xls'):
                        # Create the full file path
                        file_path = os.path.join(subdir, file)
                        name_part, data = extract_data_from_excel(file_path)
                        if name_part and data:
                            # Create a DataFrame from the data and take the first row as header
                            df = pd.DataFrame(data)
                            if not df.empty:
                                # Use the first row as header and drop the first row
                                df.columns = df.iloc[0]
                                df = df[1:]
                                # Drop rows and columns with NaN values
                                df = df.dropna(how='all').dropna(axis=1, how='all')
                                
                                # Print the formatted DataFrame
                                print(f"\nExtracted Name: {name_part}")
                                print("Extracted Table:")
                                print_table(df)
                                
                                # Write to the new Excel sheet with the extracted name as the sheet name
                                sheet_name = name_part if len(name_part) <= 31 else name_part[:31]  # Sheet names are limited to 31 characters
                                df.to_excel(writer, sheet_name=sheet_name, index=False)

        print(f"Data extraction complete for {folder_name}. Results saved in {output_file}.")

# Record the end time
end_time = time.time()
execution_time = end_time - start_time

# Print the execution time
print(f"\nScript executed in {execution_time:.2f} seconds.")
